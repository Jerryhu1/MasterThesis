#predictions <- predict(svmPred, test)
return(svmPred)
}
svmPredictionWithSmallPixel <- supportVectorMachine(train.x[1:10], allFeaturesWithSmallPix.noSfl, y)
svmPredictionWithSmallPixel <- supportVectorMachine(train.x, allFeaturesWithSmallPix.noSfl, y)
library(tuneR)
#setwd("B://Projects//MasterThesis//music-analysis")
setwd("C://School//Master//Thesis//Programming//MasterThesis//music-analysis")
song <- readMidi("chopin-no2.mid")
midi_notes <- read.csv("midi-notes.csv")
# Get all note on events
install.packages("tuneR")
library(tuneR)
#setwd("B://Projects//MasterThesis//music-analysis")
setwd("C://School//Master//Thesis//Programming//MasterThesis//music-analysis")
song <- readMidi("chopin-no2.mid")
midi_notes <- read.csv("midi-notes.csv")
# Get all note on events
note_on <- song[which(song$event=="Note On"),]
#Get events from tracks
events_track1 <- note_on[which(note_on$track == 1),]
events_track2 <- note_on[which(note_on$track == 2),]
# Map events to midi notes
key <- midi_notes$number
data <- data.frame(events_track1$parameter1)
# Get notes from the events as a sequence
notes_track1 <- midi_notes[match(data$events_track1.parameter1, key),]$notes
notes_track2 <- midi_notes[match(data$events_track2.parameter1, key),]$notes
#Initialize frequency vector
track1_note_frequency <- matrix(rep(0, length(midi_notes)), nrow=1, ncol=length(midi_notes$notes))
colnames(track1_note_frequency) <- midi_notes$notes
#Fill up frequency vector
for(i in 1:length(notes_track1)){
curr <- notes_track1[i]
track1_note_frequency[curr] <- track1_note_frequency[curr] + 1
}
#Initialize transition matrix
#TODO: Add initial note, so start note without any posterior
transition_matrix <- matrix(rep(0,length(midi_notes)*length(midi_notes)), nrow=length(midi_notes$notes), ncol =length(midi_notes$notes))
#Add dimension names
dimnames(transition_matrix) <- list(midi_notes$notes, midi_notes$notes)
for(i in 1:length(notes_track1)){
if(i == 1){next;}
prev <- notes_track1[i-1]
curr <- notes_track1[i]
transition_matrix[curr,prev] <- transition_matrix[curr,prev] + 1
}
#Divide by univariate frequency to get probabilities
transition_matrix <- t(t(transition_matrix) / track1_note_frequency[1,])
train.transitionMatrix <- function(corpus, possibleNotes){
transition_matrix <- matrix(rep(0,length(possibleNotes)*length(possibleNotes)), nrow=length(possibleNotes), ncol=length(possibleNotes))
frequency_vector <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
for(i in 1:length(corpus)){
curr <- corpus[i,]
#Take the notes of current song and get frequency vector
frequency_vector <- frequencyVector(possibleNotes, notes = curr$notes)
#Update the transition matrix by this current song
transition_matrix <- transitionMatrix(transition_matrix, possibleNotes, curr$notes)
}
# Divide by frequency vector
transition_matrix <- t(t(transition_matrix) / frequencyVector[1,])
return(transition_matrix)
}
#Creates or updates the transition matrix given its 1-gram frequency matrix, all possible notes vector and the given notes vector
transitionMatrix <- function(transition_matrix, possibleNotes, notes){
#Initialize transition matrix
#TODO: Add initial note, so start note without any posterior
if(is.null(transition_matrix)){
transition_matrix <- matrix(rep(0,length(possibleNotes)*length(possibleNotes)), nrow=length(possibleNotes), ncol=length(possibleNotes))
#Add dimension names
dimnames(transition_matrix) <- list(possibleNotes, possibleNotes)
}
for(i in 1:length(notes)){
if(i == 1){next;}
prev <- notes[i-1]
curr <- notes[i]
transition_matrix[curr,prev] <- transition_matrix[curr,prev] + 1
}
#Divide by univariate frequency to get probabilities
#transition_matrix <- t(t(transition_matrix) / frequencyVector[1,])
return(transition_matrix)
}
#Creates or updates a frequency vector given the possible notes and sequence of notes
frequencyVector<- function(note_frequency, possibleNotes, notes){
if(is.null(note_frequency)){
#Initialize frequency vector
note_frequency <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
#Set dimension names by the possible notes vector
colnames(note_frequency) <- possibleNotes
}
#Fill up frequency vector
for(i in 1:length(notes_track1)){
curr <- notes_track1[i]
note_frequency[curr] <- note_frequency[curr] + 1
}
return(note_frequency)
}
train.transitionMatrix(data, notes_track1)
View(transition_matrix)
midi_notes
midi_notes$notes
transitionMatrix(null, midi_notes$notes, notes_track1)
transitionMatrix(, midi_notes$notes, notes_track1)
transitionMatrix(undefinned, midi_notes$notes, notes_track1)
transitionMatrix(NaN, midi_notes$notes, notes_track1)
transitionMatrix(NULL
, midi_notes$notes, notes_track1)
train.transitionMatrix(c(events_track1), midi_notes$notes)
train.transitionMatrix <- function(corpus, possibleNotes){
transition_matrix <- matrix(rep(0,length(possibleNotes)*length(possibleNotes)), nrow=length(possibleNotes), ncol=length(possibleNotes))
frequency_vector <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
for(i in 1:length(corpus)){
curr <- corpus[i]
#Take the notes of current song and get frequency vector
frequency_vector <- frequencyVector(possibleNotes, notes = curr$notes)
#Update the transition matrix by this current song
transition_matrix <- transitionMatrix(transition_matrix, possibleNotes, curr$notes)
}
# Divide by frequency vector
transition_matrix <- t(t(transition_matrix) / frequencyVector[1,])
return(transition_matrix)
}
train.transitionMatrix(c(events_track1), midi_notes$notes)
transition_matrix[is.nan(transition_matrix)] <- 0
View(transition_matrix)
writer.csv(transition_matrix, 'chopin-op-9-2-transitition-matrix')
write.csv(transition_matrix, 'chopin-op-9-2-transitition-matrix')
write.csv(transition_matrix, 'chopin-op-9-2-transitition-matrix.csv')
files <- list.files("moz", pattern="*.mid", full.names=TRUE)
corpus <- lapply(files, readMidi)
files <- list.files("midi-files", pattern="*.mid", full.names=TRUE)
corpus <- lapply(files, readMidi)
corpus[i]
corpus[1]
events_track1
events_track1.parameter1
note_on.paramater1
note_on.parameter1
note_on
note_on$parameter1
data$events_track1.parameter1
data$events_track1
events_track1
events_track1$parameter1
getNotes <- function(corpus, possibleNotes){
for(i in 1:length(corpus)){
curr <- corpus[i]
# Get all note on events
note_on <- curr[which(song$event=="Note On"),]
# Get notes from the events as a sequence
notes <- possibleNotes[match(note_on.parameter1, key),]$notes
return(notes)
}
}
#Gets the notes for a specific item
getNotesForItem <- function(item, possibleNotes){
# Get all note on events
note_on <- curr[which(item$event=="Note On"),]
# Get notes from the events as a sequence
notes <- possibleNotes[match(note_on.parameter1, key),]$notes
return(notes)
}
lapply(corpus, function(item) return(getNotesForItem(item, midi_notes$notes)))
which(corpus[1]$event == "Note on")
corpus[1]
corpus[1]$event == "Note on"
item[which(item$event=="Note On"),]
#Gets the notes for a specific item
getNotesForItem <- function(item, possibleNotes){
# Get all note on events
note_on <- item[which(item$event=="Note On"),]
# Get notes from the events as a sequence
notes <- possibleNotes[match(note_on.parameter1, key),]$notes
}
lapply(corpus, function(item) return(getNotesForItem(item, midi_notes$notes)))
item <- corpus[1]
item[which(item$event == "Note On")]
item
item.event
View(item)
item[1]
View(corpus)
corpus[1,]
corpus[1,]
corpus[1][1]
item <- corpus[1][1]
item
item$event
corpus[1][2]
item[1]
item[1][1]
item[1][2]
corpus
corpus[[1]]
corpus[[1]]$parameter1
getNotesForItem(corpus[[1]], midi_notes$notes)
item <- corpus[[1]]
item$event == "Note On"
#Gets the notes for a specific item
getNotesForItem <- function(item, possibleNotes){
# Get all note on events
note_on <- item[which(item$event=="Note On"),]
# Get notes from the events as a sequence
notes <- possibleNotes[match(note_on$parameter1, key),]$notes
}
getNotesForItem(corpus[[1]], midi_notes$notes)
# Get all note on events
note_on <- item[which(item$event=="Note On"),]
possibleNotes <- midi_notes$notes
# Get notes from the events as a sequence
notes <- possibleNotes[match(note_on$parameter1, key),]$notes
match(note_on$parameter1, key)
possibleNotes[match(note_on$parameter1, key),]
?match
possibleNotes[match(note_on$parameter1, key),]
match(note_on$parameter1, key)
midi_notes$number
data$events_track1.parameter1 == events_track1.paramater1
data$events_track1.parameter1 == events_track1.parameter1
data$events_track1.parameter1 == events_track1$parameter1
midi_notes[match(data$events_track2.parameter1, key),]
midi_notes[match(data$events_track2$parameter1, key),]
data$events_track1.parameter1
midi_notes[match(data$events_track2,parameter1, key),]
midi_notes[match(data$events_track2.parameter1, key),]
midi_notes[match(data$events_track2.parameter1, key),]$notes
midi_notes[match(events_track2$parameter1, key),]$notes
match(note_on$parameter1, key)
possibleNotes
# Get all note on events
note_on <- item[which(item$event=="Note On"),]
matchedNotes <- match(note_on$parameter1, key)
possibleNotes[matchedNotes,]
matchedNotes
possibleNotes[c(1,1)]
possibleNotes[c(60,1)]
summary(matchedNotes)
possibleNotes[c(60,62, 53)]
item[which(item$event == "Note On")]
item
item$event == "Note on"
item$event == "Note On"
item[which(item$event == "Note On"),]
note_on <- item[which(item$event == "Note On"),]
# Get notes from the events as a sequence
notes <- possibleNotes[match(note_on$parameter1, key),]$notes
# Get notes from the events as a sequence
notes <- midi_notes[match(note_on$parameter1, key),]$notes
#Gets the notes for a specific item
getNotesForItem <- function(item, midi_notes){
# Get all note on events
note_on <- item[which(item$event=="Note On"),]
# Get notes from the events as a sequence
notes <- midi_notes[match(note_on$parameter1, key),]$notes
return(notes)
}
lapply(corpus, function(c) return(getNotesForItem(c, midi_notes)))
corpus_notes <- lapply(corpus, function(c) return(getNotesForItem(c, midi_notes)))
train.transitionMatrix(corpus_notes, possibleNotes)
warnings()
frequencyVector(NULL, possibleNotes, corpus_notes[1])
#Trains a transition matrix given a corpus and all possible notes.
train.transitionMatrix <- function(corpus, possibleNotes){
transition_matrix <- matrix(rep(0,length(possibleNotes)*length(possibleNotes)), nrow=length(possibleNotes), ncol=length(possibleNotes))
frequency_vector <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
for(i in 1:length(corpus)){
curr <- corpus[i]
#Take the notes of current song and get frequency vector
frequency_vector <- frequencyVector(possibleNotes, notes = curr$notes)
#Update the transition matrix by this current song
transition_matrix <- transitionMatrix(transition_matrix, possibleNotes, curr$notes)
}
# Divide by frequency vector
transition_matrix <- t(t(transition_matrix) / frequencyVector[1])
transition_matrix[is.nan(transition_matrix)] <- 0
return(transition_matrix)
}
train.transitionMatrix(corpus_notes, possibleNotes)
train.transitionMatrix <- function(corpus, possibleNotes){
transition_matrix <- matrix(rep(0,length(possibleNotes)*length(possibleNotes)), nrow=length(possibleNotes), ncol=length(possibleNotes))
frequency_vector <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
for(i in 1:length(corpus)){
curr <- corpus[i]
#Take the notes of current song and get frequency vector
frequency_vector <- frequencyVector(possibleNotes, notes = curr$notes)
#Update the transition matrix by this current song
transition_matrix <- transitionMatrix(transition_matrix, possibleNotes, curr$notes)
}
# Divide by frequency vector
transition_matrix <- t(t(transition_matrix) / frequency_vector[1,])
transition_matrix[is.nan(transition_matrix)] <- 0
return(transition_matrix)
}
train.transitionMatrix(corpus_notes, possibleNotes)
frequencyVector(NULL, possibleNotes, corpus_notes[1])
frequencyVector(NULL, possibleNotes, corpus_notes[1])[1,]
corpus[1]
corpus_notes[1]
train.transitionMatrix <- function(corpus, possibleNotes){
transition_matrix <- matrix(rep(0,length(possibleNotes)*length(possibleNotes)), nrow=length(possibleNotes), ncol=length(possibleNotes))
frequency_vector <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
for(i in 1:length(corpus)){
curr <- corpus[i]
#Take the notes of current song and get frequency vector
frequency_vector <- frequencyVector(possibleNotes, notes = curr)
#Update the transition matrix by this current song
transition_matrix <- transitionMatrix(transition_matrix, possibleNotes, curr$notes)
}
# Divide by frequency vector
transition_matrix <- t(t(transition_matrix) / frequency_vector[1,])
transition_matrix[is.nan(transition_matrix)] <- 0
return(transition_matrix)
}
train.transitionMatrix(corpus_notes, possibleNotes)
warnings()
frequencyVector(corpus_notes[1])
#Creates or updates a frequency vector given the possible notes and sequence of notes
frequencyVector<- function(note_frequency, possibleNotes, notes){
if(is.null(note_frequency)){
#Initialize frequency vector
note_frequency <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
#Set dimension names by the possible notes vector
colnames(note_frequency) <- possibleNotes
}
#Fill up frequency vector
for(i in 1:length(notes)){
curr <- notes[i]
note_frequency[curr] <- note_frequency[curr] + 1
}
return(note_frequency)
}
frequencyVector(corpus_notes[1])
frequencyVector(NULL, possibleNotes, corpus_notes[1])
frequencyVector<- function(note_frequency, possibleNotes, notes){
if(is.null(note_frequency)){
#Initialize frequency vector
note_frequency <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
#Set dimension names by the possible notes vector
colnames(note_frequency) <- possibleNotes
#Fill up frequency vector
for(i in 1:length(notes)){
curr <- notes[i]
note_frequency[curr] <- note_frequency[curr] + 1
}
return(note_frequency)
}
#Fill up frequency vector
for(i in 1:length(notes)){
curr <- notes[i]
note_frequency[curr] <- note_frequency[curr] + 1
}
return(note_frequency)
}
frequencyVector(NULL, possibleNotes, corpus_notes[1])
note_frequency <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
note_frequency[1]
#Creates or updates a frequency vector given the possible notes and sequence of notes
frequencyVector<- function(note_frequency, possibleNotes, notes){
if(is.null(note_frequency)){
#Initialize frequency vector
note_frequency <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
#Set dimension names by the possible notes vector
colnames(note_frequency) <- possibleNotes
#Fill up frequency vector
for(i in 1:length(notes)){
curr <- notes[i]
note_frequency[curr] <- note_frequency[curr] + 1
}
return(note_frequency)
}
#Fill up frequency vector
for(i in 1:length(notes)){
curr <- notes[i]
note_frequency[curr] <- note_frequency[curr] + 1
}
return(note_frequency)
}
frequencyVector(NULL, possibleNotes, corpus_notes[1])
note_frequency[1]
#Initialize frequency vector
note_frequency <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
#Set dimension names by the possible notes vector
colnames(note_frequency) <- possibleNotes
#Fill up frequency vector
note_frequency[C#]
note_frequency[C#]
note_frequency[C#,]
note_frequency
note_frequency[1]
note_frequency[G#9]
frequencyVector(corpus_notes[1])
frequencyVector(NULL, possibleNotes, corpus_notes[1])
frequencyVector(NULL, possibleNotes, corpus_notes[[1]])
frequencyVector(NULL, possibleNotes, corpus_notes[1])
corpus_notes[1]
corpus_notes[[1]
]
frequencyVector(NULL, possibleNotes, corpus_notes[1])
corpus_notes[1]
corpus_notes[1][1]
corpus_notes[[1]][1]
View(corpus_notes)
c(corpus_notes[1])
c(corpus_notes[[1]])
unlist(corpus_notes)
corpus_notes_unlist <- unlist(corpus_notes)
frequencyVector(NULL, possibleNotes, corpus_notes_unlist)
lapply(corpus_notes, function(c) return(NULL, possibleNotes, c))
lapply(corpus_notes, function(c) return(frequencyVector(NULL, possibleNotes, c)))
train.transitionMatrix(corpus,possibleNotes)
train.transitionMatrix(corpus_notes,possibleNotes)
length(notes)
#Trains a transition matrix given a corpus and all possible notes.
train.transitionMatrix <- function(corpus, possibleNotes){
transition_matrix <- matrix(rep(0,length(possibleNotes)*length(possibleNotes)), nrow=length(possibleNotes), ncol=length(possibleNotes))
frequency_vector <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
for(i in 1:length(corpus)){
curr <- corpus[[i]]
#Take the notes of current song and get frequency vector
frequency_vector <- frequencyVector(possibleNotes, notes = curr)
#Update the transition matrix by this current song
transition_matrix <- transitionMatrix(transition_matrix, possibleNotes, curr$notes)
}
# Divide by frequency vector
transition_matrix <- t(t(transition_matrix) / frequency_vector[1,])
transition_matrix[is.nan(transition_matrix)] <- 0
return(transition_matrix)
}
train.transitionMatrix(corpus_notes,possibleNotes)
warnings()
View(transition_matrix)
note_frequency[]
note_frequency[G#9]
frequency_vector <- frequencyVector(possibleNotes, corpus_notes[[1]])
frequency_vector <- frequencyVector(NULL, possibleNotes, corpus_notes[[1]])
#Trains a transition matrix given a corpus and all possible notes.
train.transitionMatrix <- function(corpus, possibleNotes){
transition_matrix <- matrix(rep(0,length(possibleNotes)*length(possibleNotes)), nrow=length(possibleNotes), ncol=length(possibleNotes))
frequency_vector <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
for(i in 1:length(corpus)){
curr <- corpus[[i]]
#Take the notes of current song and get frequency vector
frequency_vector <- frequencyVector(frequency_vector, possibleNotes, notes = curr)
#Update the transition matrix by this current song
transition_matrix <- transitionMatrix(transition_matrix, possibleNotes, curr$notes)
}
# Divide by frequency vector
transition_matrix <- t(t(transition_matrix) / frequency_vector[1,])
transition_matrix[is.nan(transition_matrix)] <- 0
return(transition_matrix)
}
train.transitionMatrix(corpus_notes,possibleNotes)
frequency_vector <- frequencyVector(frequency_vector, possibleNotes, corpus_notes[[1]])
debugSource('C:/School/Master/Thesis/Programming/MasterThesis/music-analysis/model_training.R', echo=TRUE)
install.packages("tuneR")
train.transitionMatrix(corpus_notes,possibleNotes)
View(frequency_vector)
corpus_notes[[1]]
corpus_notes[[1]]
train.transitionMatrix(corpus_notes,possibleNotes)
n
corpus_notes[[1]][1]
corpus_notes[[1]][2]
transitionMatrix(NULL, possibleNotes, corpus_notes[[1]])
train.transitionMatrix <- function(corpus, possibleNotes){
transition_matrix <- matrix(rep(0,length(possibleNotes)*length(possibleNotes)), nrow=length(possibleNotes), ncol=length(possibleNotes))
dimnames(transition_matrix) <- list(possibleNotes, possibleNotes)
frequency_vector <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
for(i in 1:length(corpus)){
curr <- corpus[[i]]
#Take the notes of current song and get frequency vector
frequency_vector <- frequencyVector(frequency_vector, possibleNotes, notes = curr)
#Update the transition matrix by this current song
transition_matrix <- transitionMatrix(transition_matrix, possibleNotes, curr$notes)
}
# Divide by frequency vector
transition_matrix <- t(t(transition_matrix) / frequency_vector[1,])
transition_matrix[is.nan(transition_matrix)] <- 0
return(transition_matrix)
}
train.transitionMatrix(corpus_notes,possibleNotes)
train.transitionMatrix <- function(corpus, possibleNotes){
transition_matrix <- matrix(rep(0,length(possibleNotes)*length(possibleNotes)), nrow=length(possibleNotes), ncol=length(possibleNotes))
dimnames(transition_matrix) <- list(possibleNotes, possibleNotes)
frequency_vector <- matrix(rep(0, length(possibleNotes)), nrow=1, ncol=length(possibleNotes))
for(i in 1:length(corpus)){
curr <- corpus[[i]]
#Take the notes of current song and get frequency vector
frequency_vector <- frequencyVector(frequency_vector, possibleNotes, notes = curr)
#Update the transition matrix by this current song
transition_matrix <- transitionMatrix(transition_matrix, possibleNotes, curr)
}
# Divide by frequency vector
transition_matrix <- t(t(transition_matrix) / frequency_vector[1,])
transition_matrix[is.nan(transition_matrix)] <- 0
return(transition_matrix)
}
train.transitionMatrix(corpus_notes,possibleNotes)
train.transitionMatrix(corpus_notes,possibleNotes)
debugSource('C:/School/Master/Thesis/Programming/MasterThesis/music-analysis/model_training.R', echo=TRUE)
install.packages("tuneR")
train.transitionMatrix(corpus_notes,possibleNotes)
View(frequency_vector)
View(transition_matrix)
trans <- train.transitionMatrix(corpus_notes,possibleNotes)
View(trans)
View(corpus)
View(corpus_notes)
summary(corpus_notes_unlist)
transitionMatrix(NULL,possibleNotes,corpus_notes_unlist)
test <- transitionMatrix(NULL,possibleNotes,corpus_notes_unlist)
View(test)
